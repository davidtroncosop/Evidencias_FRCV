{"file_contents":{"main.py":{"content":"import streamlit as st\nimport gspread\nfrom google.oauth2.service_account import Credentials\nfrom google.cloud import storage\nimport pandas as pd\nfrom datetime import datetime\nimport json\nimport os\nimport io\n\n# Definición de criterios de acreditación\nCRITERIOS_ACREDITACION = {\n    \"I. DIMENSIÓN DOCENCIA Y RESULTADOS DEL PROCESO FORMATIVO\": {\n        \"Criterio 1. Modelo educativo y diseño curricular\": \"La formulación del modelo educativo define las características y objetivos de los programas. El diseño e implementación curricular se orienta por procedimientos institucionales que guían el desarrollo de los programas conducentes a títulos y grados académicos.\",\n        \"Criterio 2. Procesos y resultados de enseñanza y aprendizaje\": \"El diseño e implementación de los programas de enseñanza y aprendizaje provee las condiciones necesarias para el logro del perfil de egreso por parte de los estudiantes, en los distintos niveles, programas y modalidades.\",\n        \"Criterio 3. Cuerpo académico\": \"El cuerpo académico cuenta con la dedicación y credenciales académicas y profesionales para el desarrollo del proceso de enseñanza y aprendizaje de toda la oferta educativa.\",\n        \"Criterio 4. Investigación, innovación docente y mejora del proceso formativo\": \"La universidad emprende y desarrolla acciones de investigación y/o innovación sobre su experiencia docente que impactan positivamente en el proceso formativo, en lo disciplinar y en lo pedagógico, de acuerdo con el proyecto institucional.\"\n    },\n    \"II. DIMENSIÓN GESTIÓN ESTRATÉGICA Y RECURSOS INSTITUCIONALES\": {\n        \"Criterio 5. Gobierno y estructura organizacional\": \"La universidad cuenta con un sistema de gobierno y una estructura organizacional que le permiten gestionar todas las funciones institucionales conforme a su misión, visión, propósitos y tamaño.\",\n        \"Criterio 6. Gestión y desarrollo de personas\": \"La universidad posee y aplica mecanismos para los procesos de reclutamiento, selección, inducción, desarrollo profesional, evaluación y retiro.\",\n        \"Criterio 7. Gestión de la convivencia, equidad de género, diversidad e inclusión\": \"La universidad promueve el desarrollo integral de su comunidad en todo su quehacer y responde en su gestión a los desafíos en materia de convivencia, equidad de género, respeto a la diversidad e inclusión.\",\n        \"Criterio 8. Gestión de recursos\": \"La universidad cuenta con los medios necesarios para el desarrollo de sus actividades, así como con políticas y mecanismos para la gestión de los recursos operativos y económicos.\"\n    },\n    \"III. DIMENSIÓN ASEGURAMIENTO INTERNO DE LA CALIDAD\": {\n        \"Criterio 9. Gestión y resultados del aseguramiento interno de la calidad\": \"La universidad define, implementa, monitorea y optimiza su sistema interno de aseguramiento de la calidad.\",\n        \"Criterio 10. Aseguramiento de la calidad de los programas formativos\": \"La institución dispone y aplica normativa o procedimientos vigentes para la mejora continua de sus procesos de formación, en todos los programas conducentes a títulos y grados académicos.\"\n    },\n    \"IV. DIMENSIÓN VINCULACIÓN CON EL MEDIO\": {\n        \"Criterio 11. Política y gestión de la vinculación con el medio\": \"La función de vinculación con el medio es bidireccional, es decir, una construcción conjunta de la universidad con sus grupos relevantes de interés.\",\n        \"Criterio 12. Resultados e impacto de la vinculación con el medio\": \"La universidad realiza acciones de vinculación con el medio que tienen un impacto positivo en su entorno significativo o a nivel nacional, y en la formación de los estudiantes.\"\n    },\n    \"V. DIMENSIÓN INVESTIGACIÓN, CREACIÓN Y/O INNOVACIÓN\": {\n        \"Criterio 13. Política y gestión de la investigación, creación y/o innovación\": \"La investigación, creación y/o innovación están presentes de manera explícita en la misión y propósitos declarados por la universidad.\",\n        \"Criterio 14. Resultados de la investigación, creación y/o innovación\": \"La universidad obtiene resultados de investigación, creación y/o innovación que generan impacto en el medio interno o externo (académico, cultural, servicios, productivo o social).\"\n    }\n}\n\n# Configuración de la página\nst.set_page_config(\n    page_title=\"Sistema de Evidencias - Acreditación Universitaria\",\n    page_icon=\"📚\",\n    layout=\"wide\"\n)\n\n# Función para inicializar Google Sheets\n@st.cache_resource\ndef init_google_sheets():\n    \"\"\"Inicializa la conexión con Google Sheets usando las credenciales de los secrets\"\"\"\n    try:\n        # Obtener credenciales desde los secrets de Replit\n        google_credentials = os.getenv(\"GOOGLE_SHEETS_CREDENTIALS\")\n        if not google_credentials:\n            st.error(\"No se encontraron las credenciales de Google Sheets en los secrets\")\n            return None\n            \n        # Parsear las credenciales JSON\n        creds_dict = json.loads(google_credentials)\n        \n        # Configurar los scopes necesarios\n        scopes = [\n            \"https://www.googleapis.com/auth/spreadsheets\",\n            \"https://www.googleapis.com/auth/drive\"\n        ]\n        \n        # Crear las credenciales\n        credentials = Credentials.from_service_account_info(creds_dict, scopes=scopes)\n        \n        # Inicializar el cliente de gspread\n        client = gspread.authorize(credentials)\n        \n        return client\n    except Exception as e:\n        st.error(f\"Error al inicializar Google Sheets: {str(e)}\")\n        return None\n\n# Función para inicializar Google Cloud Storage\n@st.cache_resource\ndef init_google_cloud_storage():\n    \"\"\"Inicializa la conexión con Google Cloud Storage usando las credenciales de los secrets\"\"\"\n    try:\n        # Obtener credenciales desde los secrets de Replit\n        google_credentials = os.getenv(\"GOOGLE_APPLICATION_CREDENTIALS\")\n        if not google_credentials:\n            st.error(\"No se encontraron las credenciales de Google Cloud Storage en los secrets\")\n            return None\n            \n        # Crear archivo temporal con las credenciales\n        import tempfile\n        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.json') as f:\n            f.write(google_credentials)\n            temp_creds_path = f.name\n        \n        # Configurar la variable de entorno\n        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = temp_creds_path\n        \n        # Inicializar el cliente de Google Cloud Storage\n        client = storage.Client()\n        \n        return client\n    except Exception as e:\n        st.error(f\"Error al inicializar Google Cloud Storage: {str(e)}\")\n        return None\n\n# Función para obtener usuarios desde Google Sheets\n@st.cache_data(ttl=300)  # Cache por 5 minutos\ndef get_users_data(_client):\n    \"\"\"Obtiene los datos de usuarios desde la hoja de Google Sheets\"\"\"\n    try:\n        # Abrir la hoja de cálculo\n        sheet = _client.open(\"sistema_evidencias\")\n        \n        # Obtener la pestaña de usuarios\n        usuarios_worksheet = sheet.worksheet(\"usuarios\")\n        \n        # Obtener todos los datos\n        data = usuarios_worksheet.get_all_records()\n        \n        return pd.DataFrame(data)\n    except Exception as e:\n        st.error(f\"Error al obtener datos de usuarios: {str(e)}\")\n        return pd.DataFrame()\n\n# Función para obtener evidencias desde Google Sheets\n@st.cache_data(ttl=60)  # Cache por 1 minuto\ndef get_evidencias_data(_client):\n    \"\"\"Obtiene los datos de evidencias desde la hoja de Google Sheets\"\"\"\n    try:\n        # Abrir la hoja de cálculo\n        sheet = _client.open(\"sistema_evidencias\")\n        \n        # Obtener la pestaña de evidencias\n        evidencias_worksheet = sheet.worksheet(\"evidencias\")\n        \n        # Obtener todos los datos\n        data = evidencias_worksheet.get_all_records()\n        \n        return pd.DataFrame(data)\n    except Exception as e:\n        st.error(f\"Error al obtener datos de evidencias: {str(e)}\")\n        return pd.DataFrame()\n\n# Función para agregar nueva evidencia\ndef add_evidencia(client, programa, subido_por, url_cloudinary, criterio, dimension, nombre_archivo):\n    \"\"\"Agrega una nueva evidencia a la hoja de Google Sheets\"\"\"\n    try:\n        # Abrir la hoja de cálculo\n        sheet = client.open(\"sistema_evidencias\")\n        \n        # Obtener la pestaña de evidencias\n        evidencias_worksheet = sheet.worksheet(\"evidencias\")\n        \n        # Crear nueva fila con los datos\n        fecha_hora = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        new_row = [programa, subido_por, url_cloudinary, fecha_hora, criterio, dimension, nombre_archivo]\n        \n        # Agregar la fila\n        evidencias_worksheet.append_row(new_row)\n        \n        return True\n    except Exception as e:\n        st.error(f\"Error al agregar evidencia: {str(e)}\")\n        return False\n\n# Función para subir archivo a Google Cloud Storage\ndef upload_to_gcs(file, folder_name, gcs_client, dimension=None, criterio=None, bucket_name=\"mi-bucket-proyecto\"):\n    \"\"\"Sube un archivo a Google Cloud Storage y retorna la URL pública\"\"\"\n    try:\n        # Crear la ruta del archivo con estructura de carpetas\n        # Limpiar nombres para que sean compatibles con GCS\n        clean_dimension = dimension.replace(\"/\", \"-\").replace(\"\\\\\", \"-\") if dimension else \"\"\n        clean_criterio = criterio.replace(\"/\", \"-\").replace(\"\\\\\", \"-\") if criterio else \"\"\n        clean_folder = folder_name.replace(\"/\", \"-\").replace(\"\\\\\", \"-\")\n        \n        # Crear la ruta: programa/dimension/criterio/archivo\n        if dimension and criterio:\n            file_path = f\"{clean_folder}/{clean_dimension}/{clean_criterio}/{file.name}\"\n        else:\n            file_path = f\"{clean_folder}/{file.name}\"\n        \n        # Obtener el bucket\n        bucket = gcs_client.bucket(bucket_name)\n        \n        # Crear el blob (archivo en GCS)\n        blob = bucket.blob(file_path)\n        \n        # Subir el archivo\n        file.seek(0)  # Resetear el puntero del archivo\n        blob.upload_from_file(file, content_type=file.type)\n        \n        # Intentar hacer el archivo público, si no se puede, usar URL autenticada\n        try:\n            blob.make_public()\n            return blob.public_url\n        except Exception as e:\n            # Si no se puede hacer público, generar URL firmada válida por 7 días\n            from datetime import timedelta\n            url = blob.generate_signed_url(\n                version=\"v4\",\n                expiration=timedelta(days=7),\n                method=\"GET\"\n            )\n            return url\n        \n    except Exception as e:\n        st.error(f\"Error al subir archivo a Google Cloud Storage: {str(e)}\")\n        return None\n\n# Función de autenticación\ndef authenticate_user(email, password, users_df):\n    \"\"\"Autentica al usuario con email y contraseña y retorna sus datos\"\"\"\n    if users_df.empty:\n        return None\n        \n    user_data = users_df[users_df['correo'].str.lower() == email.lower()]\n    \n    if not user_data.empty:\n        # Verificar contraseña (si no existe columna contraseña, permitir acceso)\n        stored_password = user_data.iloc[0].get('contraseña', password)\n        if stored_password == password:\n            return {\n                'correo': user_data.iloc[0]['correo'],\n                'programa': user_data.iloc[0]['programa'],\n                'rol': user_data.iloc[0]['rol']\n            }\n    return None\n\n# Función para mostrar el login\ndef show_login():\n    \"\"\"Muestra la pantalla de login\"\"\"\n    st.title(\"🔐 Iniciar Sesión\")\n    st.write(\"Sistema de Gestión de Evidencias de Acreditación Universitaria\")\n    \n    with st.form(\"login_form\"):\n        email = st.text_input(\"Correo electrónico\", placeholder=\"usuario@universidad.edu\")\n        password = st.text_input(\"Contraseña\", type=\"password\", placeholder=\"Ingresa tu contraseña\")\n        submit_button = st.form_submit_button(\"Iniciar Sesión\")\n        \n        if submit_button:\n            if not email or not password:\n                st.error(\"Por favor ingrese su correo electrónico y contraseña\")\n                return\n                \n            # Inicializar Google Sheets\n            client = init_google_sheets()\n            if not client:\n                return\n                \n            # Obtener datos de usuarios\n            users_df = get_users_data(client)\n            if users_df.empty:\n                st.error(\"No se pudieron cargar los datos de usuarios\")\n                return\n                \n            # Autenticar usuario\n            user_data = authenticate_user(email, password, users_df)\n            \n            if user_data:\n                st.session_state.user_data = user_data\n                st.session_state.logged_in = True\n                st.success(f\"¡Bienvenido! Ingresando como {user_data['rol']}\")\n                st.rerun()\n            else:\n                st.error(\"Correo o contraseña incorrectos\")\n\n# Función para cambiar contraseña\ndef change_password_page():\n    \"\"\"Página para cambiar contraseña\"\"\"\n    st.title(\"🔐 Cambiar Contraseña\")\n    \n    with st.form(\"change_password_form\"):\n        current_password = st.text_input(\"Contraseña actual\", type=\"password\")\n        new_password = st.text_input(\"Nueva contraseña\", type=\"password\")\n        confirm_password = st.text_input(\"Confirmar nueva contraseña\", type=\"password\")\n        submit_button = st.form_submit_button(\"Cambiar Contraseña\")\n        \n        if submit_button:\n            if not all([current_password, new_password, confirm_password]):\n                st.error(\"Por favor complete todos los campos\")\n                return\n                \n            if new_password != confirm_password:\n                st.error(\"Las contraseñas nuevas no coinciden\")\n                return\n                \n            if len(new_password) < 6:\n                st.error(\"La nueva contraseña debe tener al menos 6 caracteres\")\n                return\n            \n            # Inicializar Google Sheets\n            client = init_google_sheets()\n            if not client:\n                st.error(\"Error al conectar con la base de datos\")\n                return\n                \n            # Obtener datos de usuarios\n            users_df = get_users_data(client)\n            if users_df.empty:\n                st.error(\"No se pudieron cargar los datos de usuarios\")\n                return\n            \n            # Verificar contraseña actual\n            user_email = st.session_state.user_data['correo']\n            user_data = authenticate_user(user_email, current_password, users_df)\n            \n            if not user_data:\n                st.error(\"Contraseña actual incorrecta\")\n                return\n            \n            # Actualizar contraseña en Google Sheets\n            try:\n                worksheet = client.open(\"sistema_evidencias\").worksheet(\"usuarios\")\n                all_records = worksheet.get_all_records()\n                \n                # Encontrar la fila del usuario\n                for i, record in enumerate(all_records):\n                    if record['correo'].lower() == user_email.lower():\n                        row_num = i + 2  # +2 porque las filas empiezan en 1 y hay encabezado\n                        \n                        # Verificar si existe la columna contraseña\n                        headers = worksheet.row_values(1)\n                        if 'contraseña' not in headers:\n                            # Agregar columna contraseña si no existe\n                            worksheet.update_cell(1, len(headers) + 1, 'contraseña')\n                            col_num = len(headers) + 1\n                        else:\n                            col_num = headers.index('contraseña') + 1\n                        \n                        # Actualizar contraseña\n                        worksheet.update_cell(row_num, col_num, new_password)\n                        st.success(\"✅ Contraseña actualizada exitosamente\")\n                        \n                        # Limpiar cache para recargar datos\n                        get_users_data.clear()\n                        return\n                        \n                st.error(\"Usuario no encontrado\")\n                \n            except Exception as e:\n                st.error(f\"Error al actualizar contraseña: {str(e)}\")\n\n# Función para mostrar panel de usuario\ndef show_user_panel():\n    \"\"\"Muestra el panel para usuarios regulares\"\"\"\n    user_data = st.session_state.user_data\n    \n    st.title(f\"📋 Panel de Usuario - {user_data['programa']}\")\n    st.write(f\"Bienvenido, {user_data['correo']}\")\n    \n    # Sidebar con información del usuario\n    with st.sidebar:\n        st.header(\"Información del Usuario\")\n        st.write(f\"**Correo:** {user_data['correo']}\")\n        st.write(f\"**Programa:** {user_data['programa']}\")\n        st.write(f\"**Rol:** {user_data['rol']}\")\n        \n        if st.button(\"🔐 Cambiar Contraseña\"):\n            st.session_state.show_change_password = True\n            st.rerun()\n            \n        if st.button(\"Cerrar Sesión\"):\n            for key in st.session_state.keys():\n                del st.session_state[key]\n            st.rerun()\n    \n    # Verificar si se debe mostrar la página de cambio de contraseña\n    if st.session_state.get('show_change_password', False):\n        change_password_page()\n        \n        if st.button(\"⬅️ Volver al Panel\"):\n            st.session_state.show_change_password = False\n            st.rerun()\n        return\n    \n    # Inicializar servicios\n    client = init_google_sheets()\n    gcs_client = init_google_cloud_storage()\n    \n    if not client or not gcs_client:\n        st.error(\"Error al inicializar los servicios necesarios\")\n        return\n    \n    # Tabs para organizar la interfaz\n    tab1, tab2 = st.tabs([\"📤 Subir Evidencia\", \"📋 Mis Evidencias\"])\n    \n    with tab1:\n        st.header(\"Subir Evidencias por Criterios de Acreditación\")\n        \n        # Selector de dimensión\n        dimension_seleccionada = st.selectbox(\n            \"Seleccione la Dimensión\",\n            list(CRITERIOS_ACREDITACION.keys()),\n            help=\"Seleccione la dimensión de acreditación correspondiente\"\n        )\n        \n        # Selector de criterio basado en la dimensión\n        criterios_disponibles = list(CRITERIOS_ACREDITACION[dimension_seleccionada].keys())\n        criterio_seleccionado = st.selectbox(\n            \"Seleccione el Criterio\",\n            criterios_disponibles,\n            help=\"Seleccione el criterio específico dentro de la dimensión\"\n        )\n        \n        # Mostrar descripción del criterio\n        descripcion = CRITERIOS_ACREDITACION[dimension_seleccionada][criterio_seleccionado]\n        st.info(f\"**Descripción:** {descripcion}\")\n        \n        # Subida de múltiples archivos\n        uploaded_files = st.file_uploader(\n            f\"Seleccione los archivos para {criterio_seleccionado}\",\n            type=['pdf', 'jpg', 'jpeg', 'png', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'],\n            help=\"Formatos permitidos: PDF, imágenes, documentos de Office\",\n            accept_multiple_files=True\n        )\n        \n        if uploaded_files:\n            st.write(f\"**{len(uploaded_files)} archivo(s) seleccionado(s):**\")\n            for file in uploaded_files:\n                st.write(f\"• {file.name} ({file.size / 1024:.2f} KB)\")\n            \n            if st.button(\"Subir Evidencias\", type=\"primary\"):\n                progress_bar = st.progress(0)\n                total_files = len(uploaded_files)\n                \n                for i, uploaded_file in enumerate(uploaded_files):\n                    progress_bar.progress((i + 1) / total_files)\n                    \n                    with st.spinner(f\"Subiendo {uploaded_file.name}...\"):\n                        # Subir a Google Cloud Storage\n                        url_drive = upload_to_gcs(\n                            uploaded_file, \n                            user_data['programa'], \n                            gcs_client,\n                            dimension_seleccionada,\n                            criterio_seleccionado\n                        )\n                        \n                        if url_drive:\n                            # Registrar en Google Sheets\n                            success = add_evidencia(\n                                client, \n                                user_data['programa'], \n                                user_data['correo'], \n                                url_drive,\n                                criterio_seleccionado,\n                                dimension_seleccionada,\n                                uploaded_file.name\n                            )\n                            \n                            if success:\n                                st.success(f\"✅ {uploaded_file.name} subido exitosamente!\")\n                            else:\n                                st.error(f\"❌ Error al registrar {uploaded_file.name} en la base de datos\")\n                        else:\n                            st.error(f\"❌ Error al subir {uploaded_file.name}\")\n                \n                # Limpiar cache para mostrar datos actualizados\n                st.cache_data.clear()\n                st.balloons()\n                st.success(f\"🎉 Proceso completado! {total_files} archivo(s) procesado(s)\")\n    \n    with tab2:\n        st.header(\"Mis Evidencias por Criterios\")\n        \n        # Obtener evidencias del usuario\n        evidencias_df = get_evidencias_data(client)\n        \n        if not evidencias_df.empty:\n            # Filtrar por programa del usuario\n            user_evidencias = evidencias_df[evidencias_df['programa'] == user_data['programa']]\n            \n            if not user_evidencias.empty:\n                # Mostrar estadísticas\n                col1, col2 = st.columns(2)\n                with col1:\n                    st.metric(\"Total de Evidencias\", len(user_evidencias))\n                \n                # Verificar si existen las nuevas columnas\n                if 'criterio' in user_evidencias.columns and 'dimension' in user_evidencias.columns:\n                    with col2:\n                        criterios_unicos = int(pd.Series(user_evidencias['criterio']).nunique())\n                        st.metric(\"Criterios Cubiertos\", criterios_unicos)\n                    \n                    # Selector de filtro por dimensión\n                    st.subheader(\"🔍 Filtrar por Dimensión\")\n                    dimensiones_disponibles = ['Todas'] + sorted(pd.Series(user_evidencias['dimension']).unique().tolist())\n                    dimension_filtro = st.selectbox(\"Filtrar por Dimensión\", dimensiones_disponibles)\n                    \n                    # Aplicar filtro\n                    df_mostrar = user_evidencias.copy()\n                    if dimension_filtro != 'Todas':\n                        df_mostrar = df_mostrar[df_mostrar['dimension'] == dimension_filtro]\n                    \n                    # Mostrar evidencias agrupadas por criterio\n                    st.subheader(\"📋 Evidencias por Criterio\")\n                    \n                    if len(df_mostrar) > 0:\n                        for criterio in sorted(pd.Series(df_mostrar['criterio']).unique()):\n                            criterio_evidencias = df_mostrar[df_mostrar['criterio'] == criterio]\n                            \n                            with st.expander(f\"{criterio} ({len(criterio_evidencias)} archivo(s))\"):\n                                # Mostrar tabla para este criterio\n                                columns_to_show = ['nombre_archivo', 'fecha_hora', 'url_cloudinary']\n                                available_columns = [col for col in columns_to_show if col in criterio_evidencias.columns]\n                                \n                                if 'nombre_archivo' not in criterio_evidencias.columns:\n                                    available_columns = ['fecha_hora', 'url_cloudinary']\n                                \n                                st.dataframe(\n                                    criterio_evidencias[available_columns],\n                                    column_config={\n                                        'nombre_archivo': 'Nombre del Archivo',\n                                        'fecha_hora': 'Fecha y Hora',\n                                        'url_cloudinary': st.column_config.LinkColumn(\n                                            'Enlace al Archivo',\n                                            display_text=\"Ver Archivo\"\n                                        )\n                                    },\n                                    use_container_width=True,\n                                    hide_index=True\n                                )\n                    else:\n                        st.info(\"No hay evidencias para la dimensión seleccionada.\")\n                        \n                else:\n                    # Formato antiguo - mostrar tabla simple\n                    st.warning(\"Algunas evidencias están en formato anterior. Mostrando vista simplificada.\")\n                    columns_to_show = ['fecha_hora', 'subido_por', 'url_cloudinary']\n                    available_columns = [col for col in columns_to_show if col in user_evidencias.columns]\n                    \n                    st.dataframe(\n                        user_evidencias[available_columns],\n                        column_config={\n                            'fecha_hora': 'Fecha y Hora',\n                            'subido_por': 'Subido por',\n                            'url_cloudinary': st.column_config.LinkColumn(\n                                'Enlace al Archivo',\n                                display_text=\"Ver Archivo\"\n                            )\n                        },\n                        use_container_width=True\n                    )\n            else:\n                st.info(\"No hay evidencias registradas para tu programa aún.\")\n        else:\n            st.info(\"No se pudieron cargar las evidencias.\")\n\n# Función para mostrar panel de admin\ndef show_admin_panel():\n    \"\"\"Muestra el panel para administradores\"\"\"\n    user_data = st.session_state.user_data\n    \n    st.title(\"👨‍💼 Panel de Administrador\")\n    st.write(f\"Bienvenido, {user_data['correo']}\")\n    \n    # Sidebar con información del usuario\n    with st.sidebar:\n        st.header(\"Información del Usuario\")\n        st.write(f\"**Correo:** {user_data['correo']}\")\n        st.write(f\"**Programa:** {user_data['programa']}\")\n        st.write(f\"**Rol:** {user_data['rol']}\")\n        \n        if st.button(\"🔐 Cambiar Contraseña\", key=\"admin_change_password\"):\n            st.session_state.show_change_password = True\n            st.rerun()\n            \n        if st.button(\"Cerrar Sesión\"):\n            for key in st.session_state.keys():\n                del st.session_state[key]\n            st.rerun()\n    \n    # Verificar si se debe mostrar la página de cambio de contraseña\n    if st.session_state.get('show_change_password', False):\n        change_password_page()\n        \n        if st.button(\"⬅️ Volver al Panel\", key=\"admin_back_to_panel\"):\n            st.session_state.show_change_password = False\n            st.rerun()\n        return\n    \n    # Inicializar servicios\n    client = init_google_sheets()\n    \n    if not client:\n        st.error(\"Error al inicializar Google Sheets\")\n        return\n    \n    # Obtener datos\n    evidencias_df = get_evidencias_data(client)\n    users_df = get_users_data(client)\n    \n    if evidencias_df.empty:\n        st.info(\"No hay evidencias registradas en el sistema.\")\n        return\n    \n    # Estadísticas generales\n    st.header(\"📊 Resumen General\")\n    \n    col1, col2, col3, col4 = st.columns(4)\n    \n    with col1:\n        st.metric(\"Total Evidencias\", len(evidencias_df))\n    \n    with col2:\n        unique_programs = int(evidencias_df['programa'].nunique())\n        st.metric(\"Programas Activos\", unique_programs)\n    \n    with col3:\n        unique_users = int(evidencias_df['subido_por'].nunique())\n        st.metric(\"Usuarios Activos\", unique_users)\n    \n    with col4:\n        # Evidencias del último mes\n        today = datetime.now()\n        evidencias_df['fecha_hora'] = pd.to_datetime(evidencias_df['fecha_hora'], errors='coerce')\n        recent_evidencias = evidencias_df[\n            evidencias_df['fecha_hora'] > (today - pd.Timedelta(days=30))\n        ]\n        st.metric(\"Evidencias (30 días)\", len(recent_evidencias))\n    \n    # Filtros\n    st.header(\"🔍 Filtrar Evidencias\")\n    \n    # Verificar si existen las nuevas columnas\n    has_new_columns = 'criterio' in evidencias_df.columns and 'dimension' in evidencias_df.columns\n    \n    if has_new_columns:\n        col1, col2, col3 = st.columns(3)\n        \n        with col1:\n            # Filtro por programa\n            programas_disponibles = ['Todos'] + sorted(evidencias_df['programa'].unique().tolist())\n            programa_seleccionado = st.selectbox(\"Filtrar por Programa\", programas_disponibles)\n        \n        with col2:\n            # Filtro por dimensión\n            dimensiones_disponibles = ['Todas'] + sorted(pd.Series(evidencias_df['dimension']).unique().tolist())\n            dimension_seleccionada = st.selectbox(\"Filtrar por Dimensión\", dimensiones_disponibles)\n            \n        with col3:\n            # Filtro por criterio\n            if dimension_seleccionada != 'Todas':\n                criterios_filtrados = pd.Series(evidencias_df[evidencias_df['dimension'] == dimension_seleccionada]['criterio']).unique()\n                criterios_disponibles = ['Todos'] + sorted(criterios_filtrados.tolist())\n            else:\n                criterios_disponibles = ['Todos'] + sorted(pd.Series(evidencias_df['criterio']).unique().tolist())\n            criterio_seleccionado = st.selectbox(\"Filtrar por Criterio\", criterios_disponibles)\n    else:\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            # Filtro por programa\n            programas_disponibles = ['Todos'] + sorted(evidencias_df['programa'].unique().tolist())\n            programa_seleccionado = st.selectbox(\"Filtrar por Programa\", programas_disponibles)\n        \n        with col2:\n            dimension_seleccionada = 'Todas'\n            criterio_seleccionado = 'Todos'\n    \n    # Filtro por fecha\n    st.subheader(\"📅 Filtrar por Fecha\")\n    col1, col2 = st.columns(2)\n    with col1:\n        fecha_desde = st.date_input(\"Desde\", value=(today.date() - pd.Timedelta(days=30)))\n    with col2:\n        fecha_hasta = st.date_input(\"Hasta\", value=today.date())\n    \n    # Aplicar filtros\n    df_filtrado = evidencias_df.copy()\n    \n    if programa_seleccionado != 'Todos':\n        df_filtrado = df_filtrado[df_filtrado['programa'] == programa_seleccionado]\n    \n    if has_new_columns:\n        if dimension_seleccionada != 'Todas':\n            df_filtrado = df_filtrado[df_filtrado['dimension'] == dimension_seleccionada]\n        \n        if criterio_seleccionado != 'Todos':\n            df_filtrado = df_filtrado[df_filtrado['criterio'] == criterio_seleccionado]\n    \n    # Filtrar por fecha\n    if len(df_filtrado) > 0 and 'fecha_hora' in df_filtrado.columns:\n        fecha_serie = pd.to_datetime(df_filtrado['fecha_hora'], errors='coerce')\n        df_filtrado = df_filtrado[\n            (fecha_serie.dt.date >= fecha_desde) & \n            (fecha_serie.dt.date <= fecha_hasta)\n        ]\n    \n    # Mostrar resultados\n    st.header(\"📋 Evidencias Filtradas\")\n    \n    if len(df_filtrado) > 0:\n        st.write(f\"Mostrando {len(df_filtrado)} evidencias\")\n        \n        # Determinar columnas a mostrar basándose en las disponibles\n        if has_new_columns and 'nombre_archivo' in df_filtrado.columns:\n            columns_to_show = ['programa', 'criterio', 'nombre_archivo', 'subido_por', 'fecha_hora', 'url_cloudinary']\n            column_config = {\n                'programa': 'Programa',\n                'criterio': 'Criterio',\n                'nombre_archivo': 'Nombre del Archivo',\n                'subido_por': 'Subido por',\n                'fecha_hora': 'Fecha y Hora',\n                'url_cloudinary': st.column_config.LinkColumn(\n                    'Enlace al Archivo',\n                    display_text=\"Ver Archivo\"\n                )\n            }\n        else:\n            # Formato anterior o columnas limitadas\n            columns_to_show = ['programa', 'subido_por', 'fecha_hora', 'url_cloudinary']\n            column_config = {\n                'programa': 'Programa',\n                'subido_por': 'Subido por',\n                'fecha_hora': 'Fecha y Hora',\n                'url_cloudinary': st.column_config.LinkColumn(\n                    'Enlace al Archivo',\n                    display_text=\"Ver Archivo\"\n                )\n            }\n        \n        # Filtrar solo las columnas que existen\n        available_columns = [col for col in columns_to_show if col in df_filtrado.columns]\n        \n        # Tabla con todas las evidencias\n        st.dataframe(\n            df_filtrado[available_columns],\n            column_config=column_config,\n            use_container_width=True\n        )\n        \n        # Gráficos de distribución\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            st.subheader(\"📈 Distribución por Programa\")\n            programa_counts = pd.Series(df_filtrado['programa']).value_counts()\n            st.bar_chart(programa_counts)\n        \n        if has_new_columns:\n            with col2:\n                st.subheader(\"📊 Distribución por Criterio\")\n                criterio_counts = pd.Series(df_filtrado['criterio']).value_counts()\n                st.bar_chart(criterio_counts)\n    else:\n        st.info(\"No se encontraron evidencias con los filtros aplicados.\")\n\n# Función principal\ndef main():\n    \"\"\"Función principal de la aplicación\"\"\"\n    \n    # Inicializar session state\n    if 'logged_in' not in st.session_state:\n        st.session_state.logged_in = False\n    \n    # Verificar si el usuario está logueado\n    if not st.session_state.logged_in:\n        show_login()\n    else:\n        # Mostrar panel según el rol\n        user_role = st.session_state.user_data.get('rol', '')\n        \n        if user_role == 'admin':\n            show_admin_panel()\n        elif user_role == 'usuario':\n            show_user_panel()\n        else:\n            st.error(\"Rol de usuario no reconocido\")\n            # Limpiar session state\n            for key in st.session_state.keys():\n                del st.session_state[key]\n            st.rerun()\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":34811},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"cloudinary>=1.44.1\",\n    \"google-auth-oauthlib>=1.2.2\",\n    \"google-auth>=2.40.3\",\n    \"gspread>=6.2.1\",\n    \"pandas>=2.3.2\",\n    \"streamlit>=1.48.1\",\n    \"google-auth-httplib2>=0.2.0\",\n    \"google-api-python-client>=2.179.0\",\n    \"google-cloud-storage>=3.3.0\",\n    \"requests>=2.32.5\",\n    \"pygithub>=2.7.0\",\n    \"gitpython>=3.1.45\",\n    \"sift-stack-py>=0.8.4\",\n]\n","size_bytes":511},"replit.md":{"content":"# Overview\n\nThis is a university accreditation evidence management system built with Streamlit. The application allows users to upload, store, and manage academic evidence files based on their role and program affiliation. It features role-based access control where regular users can only manage evidence for their own program, while administrators have access to all programs with filtering capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Streamlit-based web application with a single-page architecture\n- **Layout**: Wide layout configuration for better content display\n- **Session Management**: Uses `st.session_state` for maintaining user authentication across page interactions\n- **UI Components**: Form-based login, file upload interface, and admin dashboard with filtering capabilities\n\n## Backend Architecture\n- **Structure**: Monolithic architecture contained in a single `main.py` file\n- **Authentication System**: Email-based login validation against Google Sheets user database\n- **Role-Based Access Control**: Two-tier system with \"usuario\" (user) and \"admin\" roles implementing row-level security\n- **File Processing**: Direct file upload handling with metadata extraction\n\n## Data Storage Solutions\n- **Primary Database**: Google Sheets acting as the main data store with two worksheets:\n  - \"usuarios\" worksheet: Contains user data (correo, programa, rol)\n  - \"evidencias\" worksheet: Stores evidence records (programa, subido_por, url_cloudinary, fecha_hora)\n- **File Storage**: Cloudinary cloud service for storing uploaded files (PDFs, images, etc.)\n- **Caching**: Streamlit's `@st.cache_resource` decorator for optimizing Google Sheets connections\n\n## Authentication and Authorization\n- **Authentication Method**: Email-based validation against Google Sheets user database\n- **Session Management**: Streamlit session state for maintaining login status\n- **Authorization Logic**:\n  - Regular users: Can only view/upload evidence for their assigned program\n  - Admin users: Full access to all programs with filtering capabilities\n- **Security**: Row-level security implementation based on user program affiliation\n\n# External Dependencies\n\n## Cloud Services\n- **Google Sheets API**: Primary database for user management and evidence tracking\n- **Google Drive API**: Required for Google Sheets access permissions\n- **Cloudinary**: Cloud-based file storage and management service\n\n## Authentication Services\n- **Google OAuth2**: Service account authentication for Google Sheets access\n- **Google Service Account**: Credential management through JSON key files\n\n## API Integrations\n- **gspread**: Python library for Google Sheets API interaction\n- **google-auth**: OAuth2 authentication library for Google services\n- **cloudinary**: Python SDK for Cloudinary file upload and management\n\n## Configuration Management\n- **Replit Secrets**: Environment variable storage for sensitive credentials\n- **Environment Variables**:\n  - `GOOGLE_SHEETS_CREDENTIALS`: JSON service account credentials\n  - Cloudinary configuration (cloud_name, api_key, api_secret)","size_bytes":3174}},"version":1}